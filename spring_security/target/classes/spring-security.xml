<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                  http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://www.springframework.org/schema/mvc
                  http://www.springframework.org/schema/mvc/spring-mvc.xsd
                  http://code.alibabatech.com/schema/dubbo
                  http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                  http://www.springframework.org/schema/context
                  http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">
    <!--1：定义哪些链接可以放行-->
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/login.html"/>

    <!--开启权限注解支持-->
    <security:global-method-security pre-post-annotations="enabled"></security:global-method-security>

    <!--
        2：定义哪些链接不可以放行，即需要有角色、权限才可以放行
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">

        <!--
            intercept-url：定义一个拦截规则
            pattern：对哪些url进行权限控制
            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
              请求的用户只需拥有其中的一个角色就能成功访问对应的URL
            security:intercept-url：用来设置哪些链接不可以放行
            pattern="/**"：项目根路径下的所有资源，都必须使用对应的角色、权限才能访问
            access="hasRole('ROLE_ADMIN')"：表示设置角色和权限，表示只要具有ROLE_ADMIN的角色才能访问
            access="hasAuthority('add_checkitem')"：表示设置角色和权限，表示只要具有add_checkitem的权限才能访问
            access="isAuthenticated()"：表示只要完成登录认证，就可以访问
        对页面完成权限控-->
        <!--<security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>-->
        <security:intercept-url pattern="/a.html" access="isAuthenticated()"></security:intercept-url>
        <security:intercept-url pattern="/b.html" access="hasRole('ROLE_ADMIN')"></security:intercept-url>
        <security:intercept-url pattern="/c.html" access="hasAuthority('add_checkitem')"></security:intercept-url>
        <security:intercept-url pattern="/d.html" access="hasAuthority('update_checkitem')"></security:intercept-url>

        <!--
         form-login：定义表单登录信息
            login-page="/login.html"：表示指定登录页面
            username-parameter="username"：使用登录名的名称，默认值是username
            password-parameter="password"：使用登录名的密码，默认值是password
            login-processing-url="/login.do"：表示登录的url地址
            default-target-url="/index.html"：登录成功后的url地址
            authentication-failure-url="/login.html"：认证失败后跳转的url地址，失败后指定/login.html
            always-use-default-target="true"：登录成功后，始终跳转到default-target-url指定的地址，即登录成功的默认地址，否则跳转到之前访问页面，例如某宝
            -->
        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/index.html"
                             authentication-failure-url="/login.html"
                             always-use-default-target="true"
        />

        <!--对退出功能的操作
                    logout-url="/logout.do"：退出的url地址
                    logout-success-url="/login.html" ：退出成功后跳转的页面
                    invalidate-session="true"：退出的同时，清空Session
                -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"></security:logout>

        <!--
            关闭CsrfFilter过滤器
            csrf：对应CsrfFilter过滤器
            disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true"></security:csrf>
    </security:http>

    <!--
        3：认证管理，定义登录账号名和密码，并授予访问的角色、权限
        authentication-manager：认证管理器，用于处理认证操作
    -->
    <!--    <security:authentication-manager>-->
    <!--        &lt;!&ndash;-->
    <!--            authentication-provider：认证提供者，执行具体的认证逻辑-->
    <!--        &ndash;&gt;-->
    <!--        <security:authentication-provider>-->
    <!--            &lt;!&ndash;-->
    <!--                user-service：用于获取用户信息，提供给authentication-provider进行认证-->
    <!--            &ndash;&gt;-->
    <!--            <security:user-service>-->
    <!--                &lt;!&ndash;-->
    <!--                    user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息-->
    <!--              {noop}：表示当前使用的密码为明文-->
    <!--              {encodingId}：表示默认加密方式-->
    <!--              {scrypt}：表示其他加密方式-->
    <!--              {MD5}：表示其他加密方式-->

    <!--                &ndash;&gt;-->
    <!--                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>-->
    <!--            </security:user-service>-->
    <!--        </security:authentication-provider>-->
    <!--    </security:authentication-manager>-->


    <!--目的是从数据库查询用户名和密码，并赋予角色、权限-->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <security:password-encoder ref="bCryptPasswordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--创建BCryptPasswordEncoder对象，相当于passwordEncoder.matches代码进行封装-->
    <bean id="bCryptPasswordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

    <context:component-scan base-package="com.xxm"></context:component-scan>

    <mvc:annotation-driven></mvc:annotation-driven>
</beans>